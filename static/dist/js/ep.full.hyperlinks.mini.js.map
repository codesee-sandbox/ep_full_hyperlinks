{"version":3,"sources":["copyPasteEvents.js","linkBoxes.js","linkIcons.js","linkL10n.js","newLink.js","preLinkMark.js","timeFormat.js","shared.js"],"names":["exports","moduleList","randomString","require","_","events","getReplyData","replies","linkIds","replyData","each","linkId","extend","getRepliesFromLinkId","repliesFromLinkID","reply","replyId","replaceLinkIdsWithFakeIds","linksData","html","linkIdToFakeId","link","fakeLinkId","data","originalLinkId","buildLinkIdToFakeIdMap","$","find","removeClass","addClass","getHtml","buildLinksData","links","originalLinkIds","getLinkIds","generateFakeLinkId","allSpans","span","cls","attr","classLinkId","exec","push","uniq","createHiddenDiv","range","content","cloneContents","div","document","createElement","hiddenDiv","selectionHasOnlyText","rawHtml","htmlDecode","text","buildHtmlToCopyWhenSelectionHasOnlyText","htmlWithSpans","buildHtmlWithTwoSpanTags","buildHtmlWithFormattingTagsOfSelection","parseHTML","htmlOfParentNode","commonAncestorContainer","parentNode","tags","getTagsInSelection","buildOpenTags","buildCloseTags","slice","openTags","forEach","tag","closeTags","reverse","htmlObject","hasOwnProperty","localName","prop","stylingTagRegex","parent","saveLinks","linksToSave","padId","clientVars","mapOriginalLinksId","pad","plugins","ep_full_hyperlinks","mapFakeLinks","buildLinkData","newLinkId","shared","generateLinkId","saveLinkWithoutSelection","saveReplies","repliesToSave","saveLinkReplies","linkData","input","e","innerHTML","childNodes","length","nodeValue","hasLinkOnMultipleLineSelection","firstLineOfSelection","lastLineOfSelection","rep","attributeManager","foundLineWithLink","line","firstColumn","getFirstColumnOfSelection","lastColumn","getLastColumnOfSelection","hasLinkOnLine","selStart","lastColumnOfSelection","getLength","selEnd","lineNumber","foundLinkOnLine","column","undefined","object","getAttributesOnPosition","hasMultipleLineSelected","nextLine","startLineOffset","lines","offsetOfIndex","addTextOnClipboard","ace","padInner","removeSelection","linkIdOnFirstPositionSelected","hasLinkOnSelection","callWithAce","ace_getLinkIdOnFirstPositionSelected","ace_hasLinkOnSelection","contents","getSelection","getRangeAt","textSelected","textContent","htmlToCopy","JSON","stringify","originalEvent","clipboardData","setData","preventDefault","execCommand","saveLinksAndReplies","getData","parse","getLinkIdOnFirstPositionSelected","this","documentAttributeManager","hasLink","linkBoxes","padOuter","getPadOuter","getLinksContainer","highlightLink","editorLink","socket","container","linkElm","str","inner","remove","hasClass","hide","show","css","top","parseInt","split","width","loaded","targetLeft","clientX","offset","left","targetTop","target","hyperlink","ep_hyperlink_title","ep_hyperlink_img","ep_hyperlink_description","card_loading_hyperlink","test","RegExp","on","fadeOut","fadeIn","replace","data-loaded","metaResolverCallBack","result","metadata","image","title","url","URL","hostname","last","emit","append","showLink","hideLink","hideLinkTitle","hideAllLinks","adjustTopOf","baseTop","linkElement","isOnTop","expectedTop","shouldNotCloseLink","closest","linkIcons","displayIcons","displayLinkAsIcon","getPadInner","getOrCreateIconsContainerAt","iconContainer","iconClass","iconsAtLine","targetLinkIdOf","currentTarget","getAttribute","removeHighlightTargetText","toggleActiveLinkIcon","toggleClass","addListenersToLinkIcons","highlightTargetTextOf","allActiveIcons","closeOpenedLinkIfNotOnSelectedElements","openedLink","findOpenedLink","get","insertContainer","after","addIcon","offsetTop","tmpl","appendTo","hideIcons","children","icon","isLinkOpenedByClickOnIcon","linkHasReply","shouldShow","sidebarComent","shouldShowLink","linkL10n","localize","element","html10n","translateElement","translations","newLink","validURL","localizenewLinkPopup","newLinkPopup","insertNewLinkPopupIfDontExist","callback","change","toggle","is","hideNewLinkPopup","form","val","oldText","changeFrom","changeTo","buildLinkFrom","submitNewLink","showNewLinkPopup","trigger","preLinkMarker","markSelectedText","setTimeout","focus","select","blur","unmarkSelectedText","preLinkMark","MARK_CLASS","self","highlightSelectedText","prototype","doNothing","performNonUnduableEvent","eventType","callstack","action","startNewEvent","handleMarkText","context","editorInfo","removeMarks","addMark","handleUnmarkText","editEvent","ace_setAttributeOnSelection","userId","originalSelStart","originalSelEnd","repArr","ace_getRepFromSelector","index","ace_performSelectionChange","init","timeFormat","localizable","l10nKeys","seconds","1 minute ago","minutes","1 hour ago","hours","yesterday","days","last week","weeks","last month","months","last year","years","last century","centuries","time_formats","prettyDate","time","Date","token","list_choice","l10n_appendix","Math","abs","format","i","count","floor","formatted_time","key","collectContentPre","hook","fakeLink","cc","doAttrib","state","getMapfakeLinks"],"mappings":"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","file":"ep.full.hyperlinks.mini.js","sourcesContent":["const events = (() => {\r\n\r\n\tconst addTextOnClipboard = function (e, ace, padInner, removeSelection, links, replies) {\r\n\t\tlet linkIdOnFirstPositionSelected;\r\n\t\tlet hasLinkOnSelection;\r\n\t\tace.callWithAce((ace) => {\r\n\t\t\tlinkIdOnFirstPositionSelected = ace.ace_getLinkIdOnFirstPositionSelected();\r\n\t\t\thasLinkOnSelection = ace.ace_hasLinkOnSelection();\r\n\t\t});\r\n\t\r\n\t\tif (hasLinkOnSelection) {\r\n\t\t\tlet linksData;\r\n\t\t\tconst range = padInner.contents()[0].getSelection().getRangeAt(0);\r\n\t\t\tconst rawHtml = createHiddenDiv(range);\r\n\t\t\tlet html = rawHtml;\r\n\t\t\tconst onlyTextIsSelected = selectionHasOnlyText(rawHtml);\r\n\t\r\n\t\t\t// when the range selection is fully inside a tag, 'rawHtml' will have no HTML tag, so we have to\r\n\t\t\t// build it. Ex: if we have '<span>ab<b>cdef</b>gh</span>\" and user selects 'de', the value of\r\n\t\t\t// 'rawHtml' will be 'de', not '<b>de</b>'. As it is not possible to have two links in the same text\r\n\t\t\t// linkIdOnFirstPositionSelected is the linkId in this partial selection\r\n\t\t\tif (onlyTextIsSelected) {\r\n\t\t\t\tconst textSelected = rawHtml[0].textContent;\r\n\t\t\t\thtml = buildHtmlToCopyWhenSelectionHasOnlyText(textSelected, range, linkIdOnFirstPositionSelected);\r\n\t\t\t}\r\n\t\t\tconst linkIds = getLinkIds(html);\r\n\t\t\tlinksData = buildLinksData(html, links);\r\n\t\t\tconst htmlToCopy = replaceLinkIdsWithFakeIds(linksData, html);\r\n\t\t\tlinksData = JSON.stringify(linksData);\r\n\t\t\tlet replyData = getReplyData(replies, linkIds);\r\n\t\t\treplyData = JSON.stringify(replyData);\r\n\t\t\te.originalEvent.clipboardData.setData('text/objectReply', replyData);\r\n\t\t\te.originalEvent.clipboardData.setData('text/objectLink', linksData);\r\n\t\t\t// here we override the default copy behavior\r\n\t\t\te.originalEvent.clipboardData.setData('text/html', htmlToCopy);\r\n\t\t\te.preventDefault();\r\n\t\r\n\t\t\t// if it is a cut event we have to remove the selection\r\n\t\t\tif (removeSelection) {\r\n\t\t\t\tpadInner.contents()[0].execCommand('delete');\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t\r\n\tvar getReplyData = function (replies, linkIds) {\r\n\t\tlet replyData = {};\r\n\t\t_.each(linkIds, (linkId) => {\r\n\t\t\treplyData = _.extend(getRepliesFromLinkId(replies, linkId), replyData);\r\n\t\t});\r\n\t\treturn replyData;\r\n\t};\r\n\t\r\n\tvar getRepliesFromLinkId = function (replies, linkId) {\r\n\t\tconst repliesFromLinkID = {};\r\n\t\t_.each(replies, (reply, replyId) => {\r\n\t\t\tif (reply.linkId === linkId) {\r\n\t\t\t\trepliesFromLinkID[replyId] = reply;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn repliesFromLinkID;\r\n\t};\r\n\t\r\n\tvar buildLinkIdToFakeIdMap = function (linksData) {\r\n\t\tconst linkIdToFakeId = {};\r\n\t\t_.each(linksData, (link, fakeLinkId) => {\r\n\t\t\tconst linkId = link.data.originalLinkId;\r\n\t\t\tlinkIdToFakeId[linkId] = fakeLinkId;\r\n\t\t});\r\n\t\treturn linkIdToFakeId;\r\n\t};\r\n\t\r\n\tvar replaceLinkIdsWithFakeIds = function (linksData, html) {\r\n\t\tconst linkIdToFakeId = buildLinkIdToFakeIdMap(linksData);\r\n\t\t_.each(linkIdToFakeId, (fakeLinkId, linkId) => {\r\n\t\t\t$(html).find(`.${linkId}`).removeClass(linkId).addClass(fakeLinkId);\r\n\t\t});\r\n\t\tconst htmlWithFakeLinkIds = getHtml(html);\r\n\t\treturn htmlWithFakeLinkIds;\r\n\t};\r\n\t\r\n\tvar buildLinksData = function (html, links) {\r\n\t\tconst linksData = {};\r\n\t\tconst originalLinkIds = getLinkIds(html);\r\n\t\t_.each(originalLinkIds, (originalLinkId) => {\r\n\t\t\tconst fakeLinkId = generateFakeLinkId();\r\n\t\t\tconst link = links[originalLinkId];\r\n\t\t\tlink.data.originalLinkId = originalLinkId;\r\n\t\t\tlinksData[fakeLinkId] = link;\r\n\t\t});\r\n\t\treturn linksData;\r\n\t};\r\n\t\r\n\tvar generateFakeLinkId = function () {\r\n\t\tconst linkId = `fakelink-${randomString(16)}`;\r\n\t\treturn linkId;\r\n\t};\r\n\t\r\n\tvar getLinkIds = function (html) {\r\n\t\tconst allSpans = $(html).find('span');\r\n\t\tconst linkIds = [];\r\n\t\t_.each(allSpans, (span) => {\r\n\t\t\tconst cls = $(span).attr('class');\r\n\t\t\tconst classLinkId = /(?:^| )(lc-[A-Za-z0-9]*)/.exec(cls);\r\n\t\t\tconst linkId = (classLinkId) ? classLinkId[1] : false;\r\n\t\t\tif (linkId) {\r\n\t\t\t\tlinkIds.push(linkId);\r\n\t\t\t}\r\n\t\t});\r\n\t\tconst uniqueLinkIds = _.uniq(linkIds);\r\n\t\treturn uniqueLinkIds;\r\n\t};\r\n\t\r\n\tvar createHiddenDiv = function (range) {\r\n\t\tconst content = range.cloneContents();\r\n\t\tconst div = document.createElement('div');\r\n\t\tconst hiddenDiv = $(div).html(content);\r\n\t\treturn hiddenDiv;\r\n\t};\r\n\t\r\n\tvar getHtml = function (hiddenDiv) {\r\n\t\treturn $(hiddenDiv).html();\r\n\t};\r\n\t\r\n\tvar selectionHasOnlyText = function (rawHtml) {\r\n\t\tconst html = getHtml(rawHtml);\r\n\t\tconst htmlDecoded = htmlDecode(html);\r\n\t\tconst text = $(rawHtml).text();\r\n\t\treturn htmlDecoded === text;\r\n\t};\r\n\t\r\n\tvar buildHtmlToCopyWhenSelectionHasOnlyText = function (text, range, linkId) {\r\n\t\tconst htmlWithSpans = buildHtmlWithTwoSpanTags(text, linkId);\r\n\t\tconst html = buildHtmlWithFormattingTagsOfSelection(htmlWithSpans, range);\r\n\t\r\n\t\tconst htmlToCopy = $.parseHTML(`<div>${html}</div>`);\r\n\t\treturn htmlToCopy;\r\n\t};\r\n\t\r\n\tvar buildHtmlWithFormattingTagsOfSelection = function (html, range) {\r\n\t\tconst htmlOfParentNode = range.commonAncestorContainer.parentNode;\r\n\t\tconst tags = getTagsInSelection(htmlOfParentNode);\r\n\t\r\n\t\t// this case happens when we got a selection with one or more styling (bold, italic, underline, strikethrough)\r\n\t\t// applied in all selection in the same range. For example, <b><i><u>text</u></i></b>\r\n\t\tif (tags) {\r\n\t\t\thtml = buildOpenTags(tags) + html + buildCloseTags(tags);\r\n\t\t}\r\n\t\r\n\t\treturn html;\r\n\t};\r\n\t\r\n\t// FIXME - Allow to copy a link when user copies only one char\r\n\t// This is a hack to preserve the link classes when user pastes a link. When user pastes a span like this\r\n\t// <span class='link c-124'>thing</span>, chrome removes the classes and keeps only the style of the class. With links\r\n\t// chrome keeps the background-color. To avoid this we create two spans. The first one, <span class='link c-124'>thi</span>\r\n\t// has the text until the last but one character and second one with the last character <span class='link c-124'>g</span>.\r\n\t// Etherpad does a good job joining the two spans into one after the paste is triggered.\r\n\tvar buildHtmlWithTwoSpanTags = function (text, linkId) {\r\n\t\tconst firstSpan = `<span class=\"link ${linkId}\">${text.slice(0, -1)}</span>`; // text until before last char\r\n\t\tconst secondSpan = `<span class=\"link ${linkId}\">${text.slice(-1)}</span>`; // last char\r\n\t\r\n\t\treturn firstSpan + secondSpan;\r\n\t};\r\n\t\r\n\tvar buildOpenTags = function (tags) {\r\n\t\tlet openTags = '';\r\n\t\ttags.forEach((tag) => {\r\n\t\t\topenTags += `<${tag}>`;\r\n\t\t});\r\n\t\treturn openTags;\r\n\t};\r\n\t\r\n\tvar buildCloseTags = function (tags) {\r\n\t\tlet closeTags = '';\r\n\t\tvar tags = tags.reverse();\r\n\t\ttags.forEach((tag) => {\r\n\t\t\tcloseTags += `</${tag}>`;\r\n\t\t});\r\n\t\treturn closeTags;\r\n\t};\r\n\t\r\n\tvar getTagsInSelection = function (htmlObject) {\r\n\t\tconst tags = [];\r\n\t\tlet tag;\r\n\t\tif ($(htmlObject)[0].hasOwnProperty('localName')) {\r\n\t\t\twhile ($(htmlObject)[0].localName !== 'span') {\r\n\t\t\t\tconst html = $(htmlObject).prop('outerHTML');\r\n\t\t\t\tconst stylingTagRegex = /<(b|i|u|s)>/.exec(html);\r\n\t\t\t\ttag = stylingTagRegex ? stylingTagRegex[1] : '';\r\n\t\t\t\ttags.push(tag);\r\n\t\t\t\thtmlObject = $(htmlObject).parent();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn tags;\r\n\t};\r\n\t\r\n\tconst saveLinksAndReplies = function (e) {\r\n\t\tlet links = e.originalEvent.clipboardData.getData('text/objectLink');\r\n\t\tlet replies = e.originalEvent.clipboardData.getData('text/objectReply');\r\n\t\tif (links && replies) {\r\n\t\t\tlinks = JSON.parse(links);\r\n\t\t\treplies = JSON.parse(replies);\r\n\t\t\tsaveLinks(links);\r\n\t\t\tsaveReplies(replies);\r\n\t\t}\r\n\t};\r\n\t\r\n\tvar saveLinks = function (links) {\r\n\t\tconst linksToSave = {};\r\n\t\tconst padId = clientVars.padId;\r\n\t\r\n\t\tconst mapOriginalLinksId = pad.plugins.ep_full_hyperlinks.mapOriginalLinksId;\r\n\t\tconst mapFakeLinks = pad.plugins.ep_full_hyperlinks.mapFakeLinks;\r\n\t\r\n\t\t_.each(links, (link, fakeLinkId) => {\r\n\t\t\tconst linkData = buildLinkData(link, fakeLinkId);\r\n\t\t\tconst newLinkId = shared.generateLinkId();\r\n\t\t\tmapFakeLinks[fakeLinkId] = newLinkId;\r\n\t\t\tconst originalLinkId = link.data.originalLinkId;\r\n\t\t\tmapOriginalLinksId[originalLinkId] = newLinkId;\r\n\t\t\tlinksToSave[newLinkId] = link;\r\n\t\t});\r\n\t\tpad.plugins.ep_full_hyperlinks.saveLinkWithoutSelection(padId, linksToSave);\r\n\t};\r\n\t\r\n\tvar saveReplies = function (replies) {\r\n\t\tconst repliesToSave = {};\r\n\t\tconst padId = clientVars.padId;\r\n\t\tconst mapOriginalLinksId = pad.plugins.ep_full_hyperlinks.mapOriginalLinksId;\r\n\t\t_.each(replies, (reply, replyId) => {\r\n\t\t\tconst originalLinkId = reply.linkId;\r\n\t\t\t// as the link copied has got a new linkId, we set this id in the reply as well\r\n\t\t\treply.linkId = mapOriginalLinksId[originalLinkId];\r\n\t\t\trepliesToSave[replyId] = reply;\r\n\t\t});\r\n\t\tpad.plugins.ep_full_hyperlinks.saveLinkReplies(padId, repliesToSave);\r\n\t};\r\n\t\r\n\tvar buildLinkData = function (link, fakeLinkId) {\r\n\t\tconst linkData = {};\r\n\t\tlinkData.padId = clientVars.padId;\r\n\t\tlinkData.link = link.data;\r\n\t\tlinkData.link.linkId = fakeLinkId;\r\n\t\treturn linkData;\r\n\t};\r\n\t\r\n\t// copied from https://css-tricks.com/snippets/javascript/unescape-html-in-js/\r\n\tvar htmlDecode = function (input) {\r\n\t\tconst e = document.createElement('div');\r\n\t\te.innerHTML = input;\r\n\t\treturn e.childNodes.length === 0 ? '' : e.childNodes[0].nodeValue;\r\n\t};\r\n\t\r\n\t// here we find the link id on a position [line, column]. This function is used to get the link id\r\n\t// of one line when there is ONLY text selected. E.g In the line with link, <span class='link...'>something</span>,\r\n\t// and user copies the text 'omethin'. The span tags are not copied only the text. So as the link is\r\n\t// applied on the selection we get the linkId using the first position selected of the line.\r\n\t// P.S: It's not possible to have two or more links when there is only text selected, because for each link\r\n\t// created it's generated a <span> and to copy only the text it MUST NOT HAVE any tag on the selection\r\n\tconst getLinkIdOnFirstPositionSelected = function () {\r\n\t\tconst attributeManager = this.documentAttributeManager;\r\n\t\tconst rep = this.rep;\r\n\t\tconst linkId = _.object(attributeManager.getAttributesOnPosition(rep.selStart[0], rep.selStart[1])).link;\r\n\t\treturn linkId;\r\n\t};\r\n\t\r\n\tconst hasLinkOnSelection = function () {\r\n\t\tlet hasLink;\r\n\t\tconst attributeManager = this.documentAttributeManager;\r\n\t\tconst rep = this.rep;\r\n\t\tconst firstLineOfSelection = rep.selStart[0];\r\n\t\tconst firstColumn = rep.selStart[1];\r\n\t\tconst lastColumn = rep.selEnd[1];\r\n\t\tconst lastLineOfSelection = rep.selEnd[0];\r\n\t\tconst selectionOfMultipleLine = hasMultipleLineSelected(firstLineOfSelection, lastLineOfSelection);\r\n\t\r\n\t\tif (selectionOfMultipleLine) {\r\n\t\t\thasLink = hasLinkOnMultipleLineSelection(firstLineOfSelection, lastLineOfSelection, rep, attributeManager);\r\n\t\t} else {\r\n\t\t\thasLink = hasLinkOnLine(firstLineOfSelection, firstColumn, lastColumn, attributeManager);\r\n\t\t}\r\n\t\treturn hasLink;\r\n\t};\r\n\t\r\n\tvar hasLinkOnMultipleLineSelection = function (firstLineOfSelection, lastLineOfSelection, rep, attributeManager) {\r\n\t\tlet foundLineWithLink = false;\r\n\t\tfor (let line = firstLineOfSelection; line <= lastLineOfSelection && !foundLineWithLink; line++) {\r\n\t\t\tconst firstColumn = getFirstColumnOfSelection(line, rep, firstLineOfSelection);\r\n\t\t\tconst lastColumn = getLastColumnOfSelection(line, rep, lastLineOfSelection);\r\n\t\t\tconst hasLink = hasLinkOnLine(line, firstColumn, lastColumn, attributeManager);\r\n\t\t\tif (hasLink) {\r\n\t\t\t\tfoundLineWithLink = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn foundLineWithLink;\r\n\t};\r\n\t\r\n\tvar getFirstColumnOfSelection = function (line, rep, firstLineOfSelection) {\r\n\t\treturn line !== firstLineOfSelection ? 0 : rep.selStart[1];\r\n\t};\r\n\t\r\n\tvar getLastColumnOfSelection = function (line, rep, lastLineOfSelection) {\r\n\t\tlet lastColumnOfSelection;\r\n\t\tif (line !== lastLineOfSelection) {\r\n\t\t\tlastColumnOfSelection = getLength(line, rep); // length of line\r\n\t\t} else {\r\n\t\t\tlastColumnOfSelection = rep.selEnd[1] - 1; // position of last character selected\r\n\t\t}\r\n\t\treturn lastColumnOfSelection;\r\n\t};\r\n\t\r\n\tvar hasLinkOnLine = function (lineNumber, firstColumn, lastColumn, attributeManager) {\r\n\t\tlet foundLinkOnLine = false;\r\n\t\tfor (let column = firstColumn; column <= lastColumn && !foundLinkOnLine; column++) {\r\n\t\t\tconst linkId = _.object(attributeManager.getAttributesOnPosition(lineNumber, column)).link;\r\n\t\t\tif (linkId !== undefined) {\r\n\t\t\t\tfoundLinkOnLine = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn foundLinkOnLine;\r\n\t};\r\n\t\r\n\tvar hasMultipleLineSelected = function (firstLineOfSelection, lastLineOfSelection) {\r\n\t\treturn firstLineOfSelection !== lastLineOfSelection;\r\n\t};\r\n\t\r\n\tvar getLength = function (line, rep) {\r\n\t\tconst nextLine = line + 1;\r\n\t\tconst startLineOffset = rep.lines.offsetOfIndex(line);\r\n\t\tconst endLineOffset = rep.lines.offsetOfIndex(nextLine);\r\n\t\r\n\t\t// lineLength without \\n\r\n\t\tconst lineLength = endLineOffset - startLineOffset - 1;\r\n\t\r\n\t\treturn lineLength;\r\n\t};\r\n\r\n\treturn {\r\n\t\taddTextOnClipboard,\r\n\t\tsaveLinksAndReplies,\r\n\t\tgetLinkIdOnFirstPositionSelected,\r\n\t\thasLinkOnSelection,\r\n\r\n\t}\r\n})();\r\n","const linkBoxes = (() => {\r\n\r\n\r\n\tlet padOuter;\r\n\tconst getPadOuter = function() {\r\n\t\tpadOuter = padOuter || $('iframe[name=\"ace_outer\"]').contents();\r\n\t\treturn padOuter;\r\n\t}\r\n\r\n  const getLinksContainer = () => getPadOuter().find('#links');\r\n\r\n  /* ***** Public methods: ***** */\r\n\r\n  const showLink = function (linkId, e) {\r\n    const linkElm = getLinksContainer().find(`#${linkId}`);\r\n    linkElm.show();\r\n\r\n    highlightLink(linkId, e);\r\n  };\r\n\r\n  const hideLink = function (linkId, hideLinkTitle) {\r\n    const linkElm = getLinksContainer().find(`#${linkId}`);\r\n    if (linkElm.hasClass('hyperlink-display')) {\r\n      // linkElm.css({top:  parseInt(linkElm.css(\"top\").split('px')[0]) - 35 + \"px\"  })\r\n      linkElm.css({top: `${linkElm.attr('data-basetop')}px`});\r\n      linkElm.removeClass('hyperlink-display');\r\n      linkElm.css({width: '324px'});\r\n      padOuter.find(`#edit-form-${linkId}`).hide();\r\n      padOuter.find(`#show-form-${linkId}`).show();\r\n    }\r\n\r\n\r\n    // hide even the link title\r\n    // if (hideLinkTitle) linkElm.fadeOut();\r\n\r\n    const inner = $('iframe[name=\"ace_outer\"]').contents().find('iframe[name=\"ace_inner\"]');\r\n    inner.contents().find('head .link-style').remove();\r\n\r\n    getPadOuter().find('.link-modal').removeClass('popup-show');\r\n  };\r\n\r\n  const hideAllLinks = function () {\r\n    // getLinksContainer().find('.sidebar-link').removeClass('full-display');\r\n    // getPadOuter().find('.link-modal').removeClass('popup-show');\r\n    const container = getLinksContainer();\r\n    const inner = $('iframe[name=\"ace_outer\"]').contents().find('iframe[name=\"ace_inner\"]');\r\n\r\n    container.find('.sidebar-link').each(function () {\r\n      inner.contents().find('head .link-style').remove();\r\n      if ($(this).hasClass('hyperlink-display')) {\r\n        $(this).removeClass('hyperlink-display');\r\n        $(this).css({width: '324px'});\r\n        padOuter.find(`#edit-form-${$(this).attr('data-linkid')}`).hide();\r\n        padOuter.find(`#show-form-${$(this).attr('data-linkid')}`).show();\r\n        // $(this).css({top:  parseInt($(this).css(\"top\").split('px')[0]) - 35 + \"px\"  })\r\n\r\n        $(this).css({top: `${$(this).attr('data-basetop')}px`});\r\n      }\r\n    });\r\n  };\r\n  var validURL = function (str) {\r\n    var pattern = new RegExp('^(https?:\\\\/\\\\/)?'+ // protocol\r\n      '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'+ // domain name\r\n      '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\r\n      '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port and path\r\n      '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\r\n      '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\r\n    return !!pattern.test(str);\r\n  };\r\n\r\n  var highlightLink = function (linkId, e, editorLink, socket, padId) {\r\n    const container = getLinksContainer();\r\n    const linkElm = container.find(`#${linkId}`);\r\n    var inner = $('iframe[name=\"ace_outer\"]').contents().find('iframe[name=\"ace_inner\"]');\r\n\r\n\r\n\r\n   \r\n\r\n    //if (container.is(':visible')) {\r\n      // hide all other links\r\n      container.find('.sidebar-link').each(function () {\r\n        inner.contents().find('head .link-style').remove();\r\n        if ($(this).attr('data-linkid') != linkId) {\r\n          if ($(this).hasClass('hyperlink-display')) {\r\n            $(this).removeClass('hyperlink-display');\r\n\r\n            // back to default showing\r\n            padOuter.find(`#edit-form-${$(this).attr('data-linkid')}`).hide();\r\n            padOuter.find(`#show-form-${$(this).attr('data-linkid')}`).show();\r\n\r\n            $(this).css({top:  parseInt($(this).css(\"top\").split('px')[0]) - 35 + \"px\"  })\r\n\r\n            $(this).css({top: `${linkElm.attr('data-basetop')}px`});\r\n          }\r\n        }\r\n      });\r\n\r\n      if (!linkElm.hasClass('hyperlink-display')) {\r\n        linkElm.css({width: '324px'}); // because of need to determine exact size for putting best area\r\n        const loaded = linkElm.attr('data-loaded');\r\n  \r\n        const padInner = getPadOuter().find('iframe[name=\"ace_inner\"]');\r\n        let targetLeft = e.clientX;\r\n        targetLeft += padInner.offset().left;\r\n        let targetTop = $(e.target).offset().top;\r\n        targetTop += parseInt(padInner.css('padding-top').split('px')[0]);\r\n        targetTop += parseInt(padOuter.find('#outerdocbody').css('padding-top').split('px')[0]);\r\n  \r\n        linkElm.css({left: `${parseInt(targetLeft) }px`});\r\n        linkElm.css({top: `${parseInt(targetTop) + 35}px`});\r\n        linkElm.addClass('hyperlink-display');\r\n          // linkElm.css({left: `${parseInt(editorLink.position().left) + parseInt(linkElm.css('width').split('px')[0])}px`});\r\n          // linkElm.css({top: `${parseInt(linkElm.css('top').split('px')[0]) + 35}px`});\r\n  \r\n        if (loaded != 'true') {\r\n          let hyperlink = linkElm.attr('data-hyperlink');\r\n          const ep_hyperlink_title = linkElm.find('#ep_hyperlink_title');\r\n          ep_hyperlink_title.text(hyperlink);\r\n          const ep_hyperlink_img = linkElm.find('#ep_hyperlink_img');\r\n          const ep_hyperlink_description = linkElm.find('#ep_hyperlink_description');\r\n          ep_hyperlink_description.text('');\r\n  \r\n          const card_loading_hyperlink = linkElm.find('#card_loading_hyperlink');\r\n  \r\n          ep_hyperlink_img.hide();\r\n          ep_hyperlink_title.show();\r\n          card_loading_hyperlink.show();\r\n  \r\n  \r\n          // raise for og:title resolving\r\n  \r\n          if (!(/^http:\\/\\//.test(hyperlink)) && !(/^https:\\/\\//.test(hyperlink))) {\r\n            hyperlink = `https://${hyperlink}`;\r\n          }\r\n          if(!validURL(hyperlink))\r\n          {\r\n            ep_hyperlink_img.attr('src', '../static/plugins/ep_full_hyperlinks/static/dist/img/nometa.png');\r\n                ep_hyperlink_img.on('load', () => {\r\n                  card_loading_hyperlink.fadeOut(500, () => {\r\n                    ep_hyperlink_img.fadeIn();\r\n                    ep_hyperlink_description.text(hyperlink.replace(/^(?:https?:\\/\\/)?(?:www\\.)?/i, '').split('/')[0]);\r\n                    linkElm.attr({'data-loaded': true});\r\n                  });\r\n                });\r\n              return false;\r\n          }\r\n          // ........\r\n          const metaResolverCallBack = function (result) {\r\n            ep_hyperlink_title.attr('href', hyperlink);\r\n  \r\n            if (result.metadata.image && result.metadata.title) {\r\n              ep_hyperlink_img.attr('src', result.metadata.image);\r\n              ep_hyperlink_img.on('load', () => {\r\n                card_loading_hyperlink.fadeOut(500, () => {\r\n                  ep_hyperlink_img.fadeIn();\r\n                  ep_hyperlink_title.text(result.metadata.title);\r\n                  ep_hyperlink_description.text(result.metadata.url.replace(/^(?:https?:\\/\\/)?(?:www\\.)?/i, '').split('/')[0]);\r\n                  linkElm.attr({'data-loaded': true});\r\n                });\r\n              });\r\n            } else {\r\n              const url = new URL(hyperlink);\r\n              hyperlink = `https://${url.hostname}`;\r\n              if (result.last !== true) {\r\n                socket.emit('metaResolver', {padId, hyperlink, last: true}, metaResolverCallBack);\r\n              } else {\r\n                ep_hyperlink_img.attr('src', '../static/plugins/ep_full_hyperlinks/static/dist/img/nometa.png');\r\n                ep_hyperlink_img.on('load', () => {\r\n                  card_loading_hyperlink.fadeOut(500, () => {\r\n                    ep_hyperlink_img.fadeIn();\r\n                    ep_hyperlink_description.text(hyperlink.replace(/^(?:https?:\\/\\/)?(?:www\\.)?/i, '').split('/')[0]);\r\n                    linkElm.attr({'data-loaded': true});\r\n                  });\r\n                });\r\n              }\r\n            }\r\n  \r\n            \r\n          };\r\n          // ........\r\n  \r\n  \r\n          socket.emit('metaResolver', {padId, hyperlink, last: false}, metaResolverCallBack);\r\n        }\r\n      }\r\n\r\n     \r\n      // else{\r\n      //   linkElm.removeClass('hyperlink-display');\r\n      //   linkElm.css({top:  parseInt(linkElm.css(\"top\").split('px')[0]) - 40 + \"px\"  })\r\n\r\n      // }\r\n      // Then highlight new link\r\n\r\n      // now if we apply a class such as mouseover to the editor it will go shitty\r\n      // so what we need to do is add CSS for the specific ID to the document...\r\n      // It's fucked up but that's how we do it..\r\n      var inner = $('iframe[name=\"ace_outer\"]').contents().find('iframe[name=\"ace_inner\"]');\r\n      inner.contents().find('head').append(`<style class='link-style'>.${linkId}{ color: #a7680c !important }</style>`);\r\n    // } else {\r\n    //   // make a full copy of the html, including listeners\r\n    //   const linkElmCloned = linkElm.clone(true, true);\r\n\r\n    //   // before of appending clear the css (like top positionning)\r\n    //   linkElmCloned.attr('style', '');\r\n    //   // fix checkbox, because as we are duplicating the sidebar-link, we lose unique input names\r\n    //   linkElmCloned.find('.label-suggestion-checkbox').click(function () {\r\n    //     $(this).siblings('input[type=\"checkbox\"]').click();\r\n    //   });\r\n\r\n    //   // hovering link view\r\n    //   getPadOuter().find('.link-modal-link').html('').append(linkElmCloned);\r\n    //   const padInner = getPadOuter().find('iframe[name=\"ace_inner\"]');\r\n    //   // get modal position\r\n    //   const containerWidth = getPadOuter().find('#outerdocbody').outerWidth(true);\r\n    //   const modalWitdh = getPadOuter().find('.link-modal').outerWidth(true);\r\n    //   var targetLeft = e.clientX;\r\n    //   let targetTop = $(e.target).offset().top;\r\n    //   if (editorLink) {\r\n    //     targetLeft += padInner.offset().left;\r\n    //     targetTop += parseInt(padInner.css('padding-top').split('px')[0]);\r\n    //     targetTop += parseInt(padOuter.find('#outerdocbody').css('padding-top').split('px')[0]);\r\n    //   } else {\r\n    //     // mean we are clicking from a link Icon\r\n    //     var targetLeft = $(e.target).offset().left - 20;\r\n    //   }\r\n\r\n    //   // if positioning modal on target left will make part of the modal to be\r\n    //   // out of screen, we place it closer to the middle of the screen\r\n    //   if (targetLeft + modalWitdh > containerWidth) {\r\n    //     targetLeft = containerWidth - modalWitdh - 25;\r\n    //   }\r\n    //   const editorLinkHeight = editorLink ? editorLink.outerHeight(true) : 30;\r\n    //   getPadOuter().find('.link-modal').addClass('popup-show').css({\r\n    //     left: `${targetLeft}px`,\r\n    //     top: `${targetTop + editorLinkHeight}px`,\r\n    //   });\r\n    // }\r\n\r\n\r\n\r\n\r\n   \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  };\r\n\r\n  // Adjust position of the link detail on the container, to be on the same\r\n  // height of the pad text associated to the link, and return the affected element\r\n  const adjustTopOf = function (linkId, baseTop) {\r\n    const linkElement = getPadOuter().find(`#${linkId}`);\r\n    linkElement.css('top', `${baseTop}px`);\r\n    linkElement.attr('data-basetop', baseTop);\r\n\r\n    return linkElement;\r\n  };\r\n\r\n  // Indicates if link is on the expected position (baseTop-5)\r\n  const isOnTop = function (linkId, baseTop) {\r\n    const linkElement = getPadOuter().find(`#${linkId}`);\r\n    const expectedTop = `${baseTop}px`;\r\n    return linkElement.css('top') === expectedTop;\r\n  };\r\n\r\n  // Indicates if event was on one of the elements that does not close link\r\n  const shouldNotCloseLink = function (e) {\r\n    // a link box\r\n    if (\r\n\t\t\t$(e.target).closest('.link').length || $(e.target).closest('.link-modal').length ||\r\n\t\t\t$(e.target).closest('.ep_hyperlink_docs_bubble_button_edit').length ||\r\n\t\t\t$(e.target).closest('.ep_hyperlink_docs_bubble_button_delete').length ||\r\n\t\t\t$(e.target).closest('.ep_hyperlink_docs_bubble_button_copy').length ||\r\n\t\t\t$(e.target).closest('.full-display-link').length ||\r\n\t\t\t$(e.target).closest('.link-title-wrapper').length ||\r\n\t\t\t$(e.target).closest('.link-edit-form').length ||\r\n\t\t\t$(e.target).closest('.link-text-text').length ||\r\n\t\t\t$(e.target).closest('.link-text-hyperlink').length\r\n    ) { // the link modal\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  return {\r\n    showLink,\r\n    hideLink,\r\n    hideAllLinks,\r\n    highlightLink,\r\n    adjustTopOf,\r\n    isOnTop,\r\n    shouldNotCloseLink,\r\n\r\n  };\r\n})();\r\n","const linkIcons = (() => {\r\n\r\n\t// Indicates if Etherpad is configured to display icons\r\n\tvar displayIcons = function () {\r\n\t\treturn clientVars.displayLinkAsIcon;\r\n\t};\r\n\r\n\t// Easier access to outer pad\r\n\tvar padOuter;\r\n\tvar getPadOuter = function () {\r\n\t\tpadOuter = padOuter || $('iframe[name=\"ace_outer\"]').contents();\r\n\t\treturn padOuter;\r\n\t};\r\n\r\n\t// Easier access to inner pad\r\n\tvar padInner;\r\n\tvar getPadInner = function () {\r\n\t\tpadInner = padInner || getPadOuter().find('iframe[name=\"ace_inner\"]').contents();\r\n\t\treturn padInner;\r\n\t};\r\n\r\n\tvar getOrCreateIconsContainerAt = function (top) {\r\n\t\tconst iconContainer = getPadOuter().find('#linkIcons');\r\n\t\tconst iconClass = `icon-at-${top}`;\r\n\r\n\t\t// is this the 1st link on that line?\r\n\t\tlet iconsAtLine = iconContainer.find(`.${iconClass}`);\r\n\t\tconst isFirstIconAtLine = iconsAtLine.length === 0;\r\n\r\n\t\t// create container for icons at target line, if it does not exist yet\r\n\t\tif (isFirstIconAtLine) {\r\n\t\t\ticonContainer.append(`<div class=\"link-icon-line ${iconClass}\"></div>`);\r\n\t\t\ticonsAtLine = iconContainer.find(`.${iconClass}`);\r\n\t\t\ticonsAtLine.css('top', `${top}px`);\r\n\t\t}\r\n\r\n\t\treturn iconsAtLine;\r\n\t};\r\n\r\n\tvar targetLinkIdOf = function (e) {\r\n\t\treturn e.currentTarget.getAttribute('data-linkid');\r\n\t};\r\n\r\n\tvar highlightTargetTextOf = function (linkId) {\r\n\t\tgetPadInner().find('head').append(`<style class='link-style'>.${linkId}{ color: #a7680c !important }</style>`);\r\n\t};\r\n\r\n\tvar removeHighlightTargetText = function (linkId) {\r\n\t\tgetPadInner().find('head .link-style').remove();\r\n\t};\r\n\r\n\tvar toggleActiveLinkIcon = function (target) {\r\n\t\ttarget.toggleClass('active').toggleClass('inactive');\r\n\t};\r\n\r\n\tvar addListenersToLinkIcons = function () {\r\n\t\tgetPadOuter().find('#linkIcons').on('mouseover', '.link-icon', (e) => {\r\n\t\t\tremoveHighlightTargetText();\r\n\t\t\tconst linkId = targetLinkIdOf(e);\r\n\t\t\thighlightTargetTextOf(linkId);\r\n\t\t}).on('mouseout', '.link-icon', (e) => {\r\n\t\t\tconst linkId = targetLinkIdOf(e);\r\n\t\t\tremoveHighlightTargetText();\r\n\t\t}).on('click', '.link-icon.active', function (e) {\r\n\t\t\ttoggleActiveLinkIcon($(this));\r\n\r\n\t\t\tconst linkId = targetLinkIdOf(e);\r\n\t\t\tlinkBoxes.hideLink(linkId, true);\r\n\t\t}).on('click', '.link-icon.inactive', function (e) {\r\n\t\t\t// deactivate/hide other link boxes that are opened, so we have only\r\n\t\t\t// one link box opened at a time\r\n\t\t\tlinkBoxes.hideAllLinks();\r\n\t\t\tconst allActiveIcons = getPadOuter().find('#linkIcons').find('.link-icon.active');\r\n\t\t\ttoggleActiveLinkIcon(allActiveIcons);\r\n\r\n\t\t\t// activate/show only target link\r\n\t\t\ttoggleActiveLinkIcon($(this));\r\n\t\t\tconst linkId = targetLinkIdOf(e);\r\n\t\t\tlinkBoxes.highlightLink(linkId, e);\r\n\t\t});\r\n\t};\r\n\r\n\t// Listen to clicks on the page to be able to close link when clicking\r\n\t// outside of it\r\n\tvar addListenersToCloseOpenedLink = function () {\r\n\t\t// we need to add listeners to the different iframes of the page\r\n\t\t$(document).on('touchstart click', (e) => {\r\n\t\t\tcloseOpenedLinkIfNotOnSelectedElements(e);\r\n\t\t});\r\n\t\tgetPadOuter().find('html').on('touchstart click', (e) => {\r\n\t\t\tcloseOpenedLinkIfNotOnSelectedElements(e);\r\n\t\t});\r\n\t\tgetPadInner().find('html').on('touchstart click', (e) => {\r\n\t\t\tcloseOpenedLinkIfNotOnSelectedElements(e);\r\n\t\t});\r\n\t};\r\n\r\n\t// Close link if event target was outside of link or on a link icon\r\n\tvar closeOpenedLinkIfNotOnSelectedElements = function (e) {\r\n\t\t// Don't do anything if clicked on the following elements:\r\n\t\t// any of the link icons\r\n\t\tif (shouldNotCloseLink(e) || linkBoxes.shouldNotCloseLink(e)) { // a link box or the link modal\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// All clear, can close the link\r\n\t\tconst openedLink = findOpenedLink();\r\n\t\tif (openedLink) {\r\n\t\t\ttoggleActiveLinkIcon($(openedLink));\r\n\r\n\t\t\tconst linkId = openedLink.getAttribute('data-linkid');\r\n\t\t\tlinkBoxes.hideLink(linkId, true);\r\n\t\t}\r\n\t};\r\n\r\n\t// Search on the page for an opened link\r\n\tvar findOpenedLink = function () {\r\n\t\treturn getPadOuter().find('#linkIcons .link-icon.active').get(0);\r\n\t};\r\n\r\n\t/* ***** Public methods: ***** */\r\n\r\n\t// Create container to hold link icons\r\n\tvar insertContainer = function () {\r\n\t\t// we're only doing something if icons will be displayed at all\r\n\t\tif (!displayIcons()) return;\r\n\r\n\t\tgetPadOuter().find('#sidediv').after('<div id=\"linkIcons\"></div>');\r\n\t\tgetPadOuter().find('#links').addClass('with-icons');\r\n\t\taddListenersToLinkIcons();\r\n\t\taddListenersToCloseOpenedLink();\r\n\t};\r\n\r\n\t// Create a new link icon\r\n\tvar addIcon = function (linkId, link) {\r\n\t\t// we're only doing something if icons will be displayed at all\r\n\t\tif (!displayIcons()) return;\r\n\r\n\t\tconst inlineLink = getPadInner().find(`.link.${linkId}`);\r\n\t\tconst top = inlineLink.get(0).offsetTop;\r\n\t\tconst iconsAtLine = getOrCreateIconsContainerAt(top);\r\n\t\tconst icon = $('#linkIconTemplate').tmpl(link);\r\n\r\n\t\ticon.appendTo(iconsAtLine);\r\n\t};\r\n\r\n\t// Hide link icons from container\r\n\tvar hideIcons = function () {\r\n\t\t// we're only doing something if icons will be displayed at all\r\n\t\tif (!displayIcons()) return;\r\n\r\n\t\tgetPadOuter().find('#linkIcons').children().children().each(function () {\r\n\t\t\t$(this).hide();\r\n\t\t});\r\n\t};\r\n\r\n\t// Adjust position of the link icon on the container, to be on the same\r\n\t// height of the pad text associated to the link, and return the affected icon\r\n\tvar adjustTopOf = function (linkId, baseTop) {\r\n\t\t// we're only doing something if icons will be displayed at all\r\n\t\tif (!displayIcons()) return;\r\n\r\n\t\tconst icon = getPadOuter().find(`#icon-${linkId}`);\r\n\t\tconst targetTop = baseTop;\r\n\t\tconst iconsAtLine = getOrCreateIconsContainerAt(targetTop);\r\n\r\n\t\t// move icon from one line to the other\r\n\t\tif (iconsAtLine != icon.parent()) icon.appendTo(iconsAtLine);\r\n\r\n\t\ticon.show();\r\n\r\n\t\treturn icon;\r\n\t};\r\n\r\n\t// Indicate if link detail currently opened was shown by a click on\r\n\t// link icon.\r\n\tvar isLinkOpenedByClickOnIcon = function () {\r\n\t\t// we're only doing something if icons will be displayed at all\r\n\t\tif (!displayIcons()) return false;\r\n\r\n\t\tconst iconClicked = getPadOuter().find('#linkIcons').find('.link-icon.active');\r\n\t\tconst linkOpenedByClickOnIcon = iconClicked.length !== 0;\r\n\r\n\t\treturn linkOpenedByClickOnIcon;\r\n\t};\r\n\r\n\t// Mark link as a link-with-reply, so it can be displayed with a\r\n\t// different icon\r\n\tvar linkHasReply = function (linkId) {\r\n\t\t// we're only doing something if icons will be displayed at all\r\n\t\tif (!displayIcons()) return;\r\n\r\n\t\t// change link icon\r\n\t\tconst iconForLink = getPadOuter().find('#linkIcons').find(`#icon-${linkId}`);\r\n\t\ticonForLink.addClass('with-reply');\r\n\t};\r\n\r\n\t// Indicate if sidebar link should be shown, checking if it had the characteristics\r\n\t// of a link that was being displayed on the screen\r\n\tvar shouldShow = function (sidebarComent) {\r\n\t\tlet shouldShowLink = false;\r\n\r\n\t\tif (!displayIcons()) {\r\n\t\t\t// if icons are not being displayed, we always show links\r\n\t\t\tshouldShowLink = true;\r\n\t\t} else if (sidebarComent.hasClass('mouseover')) {\r\n\t\t\t// if icons are being displayed, we only show links clicked by user\r\n\t\t\tshouldShowLink = true;\r\n\t\t}\r\n\r\n\t\treturn shouldShowLink;\r\n\t};\r\n\r\n\t// Indicates if event was on one of the elements that does not close link (any of the link icons)\r\n\tvar shouldNotCloseLink = function (e) {\r\n\t\treturn $(e.target).closest('.link-icon').length !== 0;\r\n\t};\r\n\r\n\treturn {\r\n\t\tinsertContainer,\r\n\t\taddIcon,\r\n\t\thideIcons,\r\n\t\tadjustTopOf,\r\n\t\tisLinkOpenedByClickOnIcon,\r\n\t\tlinkHasReply,\r\n\t\tshouldShow,\r\n\t\tshouldNotCloseLink,\r\n\r\n\t}\r\n})();\r\n","const linkL10n = (() => {\r\n\tvar localize = function (element) {\r\n\t\thtml10n.translateElement(html10n.translations, element.get(0));\r\n\t};\r\n\treturn {\r\n\t\tlocalize\r\n\t}\r\n})();\r\n","const newLink = (() => {\r\n\r\n\t// Create a link object with data filled on the given form\r\n\tvar buildLinkFrom = function (form) {\r\n\t\tconst text = form.find('#hyperlink-text').val();\r\n\t\tconst oldText = form.find('#hyperlink-text-hidden').val();\r\n\t\tlet hyperlink = form.find('#hyperlink-url').val();\r\n\t\tconst changeFrom = form.find('.from-value').text();\r\n\t\tconst changeTo = form.find('.to-value').val() || null;\r\n\t\tconst link = {};\r\n\t\tif (!(/^http:\\/\\//.test(hyperlink)) && !(/^https:\\/\\//.test(hyperlink))) {\r\n\t\t\thyperlink = `https://${hyperlink}`;\r\n\t\t}\r\n\t\tlink.text = text;\r\n\t\tlink.oldText = oldText;\r\n\t\tlink.hyperlink = hyperlink;\r\n\r\n\t\tif (changeTo) {\r\n\t\t\tlink.changeFrom = changeFrom;\r\n\t\t\tlink.changeTo = changeTo;\r\n\t\t}\r\n\t\treturn link;\r\n\t};\r\n\r\n\t// Callback for new link Cancel\r\n\tvar cancelNewLink = function () {\r\n\t\thideNewLinkPopup();\r\n\t};\r\n\r\n\t// Callback for new link Submit\r\n\tvar submitNewLink = function (callback) {\r\n\t\tconst index = 0;\r\n\t\tconst form = $('#newLink');\r\n\t\tconst link = buildLinkFrom(form);\r\n\t\tif ((link.text.length > 0 || link.changeTo && link.changeTo.length > 0) && validURL(link.hyperlink)) {\r\n\t\t\tform.find('.link-content, .to-value').removeClass('error');\r\n\t\t\thideNewLinkPopup();\r\n\t\t\tcallback(link, index);\r\n\t\t} else {\r\n\t\t\tif (link.text.length == 0) form.find('.link-content').addClass('error');\r\n\t\t\tif (!validURL(link.hyperlink)) form.find('#hyperlink-url').addClass('error');\r\n\r\n\t\t\tif (link.changeTo && link.changeTo.length == 0) form.find('.to-value').addClass('error');\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tvar validURL = function (str) {\r\n\t\tvar pattern = new RegExp('^(https?:\\\\/\\\\/)?'+ // protocol\r\n\t\t  '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'+ // domain name\r\n\t\t  '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\r\n\t\t  '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port and path\r\n\t\t  '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\r\n\t\t  '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\r\n\t\treturn !!pattern.test(str);\r\n\t  };\r\n\t/* ***** Public methods: ***** */\r\n\r\n\tvar localizenewLinkPopup = function () {\r\n\t\tconst newLinkPopup = $('#newLink');\r\n\t\tif (newLinkPopup.length !== 0) linkL10n.localize(newLinkPopup);\r\n\t};\r\n\r\n\t// Insert new Link Form\r\n\tvar insertNewLinkPopupIfDontExist = function (link, callback) {\r\n\t\t$('#newLink').remove();\r\n\t\tvar newLinkPopup = $('#newLink');\r\n\r\n\t\tlink.linkId = '';\r\n\t\tvar newLinkPopup = $('#newLinkTemplate').tmpl(link);\r\n\t\tnewLinkPopup.appendTo($('#editorcontainerbox'));\r\n\r\n\t\tlocalizenewLinkPopup();\r\n\r\n\t\t// Listen for include suggested change toggle\r\n\t\t$('#newLink').find('.suggestion-checkbox').change(function () {\r\n\t\t\t$('#newLink').find('.suggestion').toggle($(this).is(':checked'));\r\n\t\t});\r\n\r\n\t\t// Cancel btn\r\n\t\tnewLinkPopup.find('#link-reset').on('click', () => {\r\n\t\t\tcancelNewLink();\r\n\t\t});\r\n\t\t// Create btn // link-create-btn\r\n\t\t$('#newLink').on('submit', (e) => {\r\n\t\t\te.preventDefault();\r\n\t\t\treturn submitNewLink(callback);\r\n\t\t});\r\n\r\n\t\treturn newLinkPopup;\r\n\t};\r\n\r\n\tvar showNewLinkPopup = function () {\r\n\t\t// position below link icon\r\n\t\t$('#newLink').css('left', $('.toolbar .addLink').offset().left);\r\n\r\n\t\t// Reset form to make sure it is all clear\r\n\t\t$('#newLink').find('.suggestion-checkbox').prop('checked', false).trigger('change');\r\n\t\t$('#newLink').find('textarea').val('');\r\n\t\t$('#newLink').find('.link-content, .to-value').removeClass('error');\r\n\r\n\t\t// Show popup\r\n\t\t$('#newLink').addClass('popup-show');\r\n\r\n\r\n\t\t// mark selected text, so it is clear to user which text range the link is being applied to\r\n\t\tpad.plugins.ep_full_hyperlinks.preLinkMarker.markSelectedText();\r\n\r\n\t\t// focus on hyperlink input\r\n\r\n\r\n\t\tsetTimeout(() => { $('#newLink').find('.link-content').focus().select(); }, 500);\r\n\t};\r\n\r\n\tvar hideNewLinkPopup = function () {\r\n\t\t$('#newLink').removeClass('popup-show');\r\n\r\n\t\t// force focus to be lost, so virtual keyboard is hidden on mobile devices\r\n\t\t$('#newLink').find(':focus').blur();\r\n\r\n\t\t// unmark selected text, as now there is no text being linked\r\n\t\tpad.plugins.ep_full_hyperlinks.preLinkMarker.unmarkSelectedText();\r\n\t};\r\n\t\r\n\treturn {\r\n\t\tlocalizenewLinkPopup,\r\n\t\tinsertNewLinkPopupIfDontExist,\r\n\t\tshowNewLinkPopup,\r\n\t\thideNewLinkPopup,\r\n\r\n\t}\r\n\r\n})();\r\n","const preLinkMark = (() => {\r\n\t\r\n\tconst MARK_CLASS = 'pre-selected-link';\r\n\r\n\tvar preLinkMarker = function (ace) {\r\n\t\tthis.ace = ace;\r\n\t\tconst self = this;\r\n\r\n\t\t// do nothing if this feature is not enabled\r\n\t\tif (!this.highlightSelectedText()) return;\r\n\r\n\t\t// remove any existing marks, as there is no link being added on plugin initialization\r\n\t\t// (we need the timeout to let the plugin be fully initialized before starting to remove\r\n\t\t// marked texts)\r\n\t\tsetTimeout(() => {\r\n\t\t\tself.unmarkSelectedText();\r\n\t\t}, 0);\r\n\t};\r\n\r\n\t// Indicates if Etherpad is configured to highlight text\r\n\tpreLinkMarker.prototype.highlightSelectedText = function () {\r\n\t\treturn clientVars.highlightSelectedText;\r\n\t};\r\n\r\n\tpreLinkMarker.prototype.markSelectedText = function () {\r\n\t\t// do nothing if this feature is not enabled\r\n\t\tif (!this.highlightSelectedText()) return;\r\n\r\n\t\tthis.ace.callWithAce(doNothing, 'markPreSelectedTextToLink', true);\r\n\t};\r\n\r\n\tpreLinkMarker.prototype.unmarkSelectedText = function () {\r\n\t\t// do nothing if this feature is not enabled\r\n\t\tif (!this.highlightSelectedText()) return;\r\n\r\n\t\tthis.ace.callWithAce(doNothing, 'unmarkPreSelectedTextToLink', true);\r\n\t};\r\n\r\n\tpreLinkMarker.prototype.performNonUnduableEvent = function (eventType, callstack, action) {\r\n\t\tcallstack.startNewEvent('nonundoable');\r\n\t\taction();\r\n\t\tcallstack.startNewEvent(eventType);\r\n\t};\r\n\r\n\tpreLinkMarker.prototype.handleMarkText = function (context) {\r\n\t\tconst editorInfo = context.editorInfo;\r\n\t\tconst rep = context.rep;\r\n\t\tconst callstack = context.callstack;\r\n\r\n\t\t// first we need to unmark any existing text, otherwise we'll have 2 text ranges marked\r\n\t\tthis.removeMarks(editorInfo, rep, callstack);\r\n\r\n\t\tthis.addMark(editorInfo, callstack);\r\n\t};\r\n\r\n\tpreLinkMarker.prototype.handleUnmarkText = function (context) {\r\n\t\tconst editorInfo = context.editorInfo;\r\n\t\tconst rep = context.rep;\r\n\t\tconst callstack = context.callstack;\r\n\r\n\t\tthis.removeMarks(editorInfo, rep, callstack);\r\n\t};\r\n\r\n\tpreLinkMarker.prototype.addMark = function (editorInfo, callstack) {\r\n\t\tconst eventType = callstack.editEvent.eventType;\r\n\r\n\t\t// we don't want the text marking to be undoable\r\n\t\tthis.performNonUnduableEvent(eventType, callstack, () => {\r\n\t\t\teditorInfo.ace_setAttributeOnSelection(MARK_CLASS, clientVars.userId);\r\n\t\t});\r\n\t};\r\n\r\n\tpreLinkMarker.prototype.removeMarks = function (editorInfo, rep, callstack) {\r\n\t\tconst eventType = callstack.editEvent.eventType;\r\n\t\tconst originalSelStart = rep.selStart;\r\n\t\tconst originalSelEnd = rep.selEnd;\r\n\r\n\t\t// we don't want the text marking to be undoable\r\n\t\tthis.performNonUnduableEvent(eventType, callstack, () => {\r\n\t\t\t// remove marked text\r\n\t\t\tconst padInner = $('iframe[name=\"ace_outer\"]').contents().find('iframe[name=\"ace_inner\"]');\r\n\t\t\tconst selector = `.${MARK_CLASS}`;\r\n\t\t\tconst repArr = editorInfo.ace_getRepFromSelector(selector, padInner);\r\n\t\t\t// repArr is an array of reps\r\n\t\t\t$.each(repArr, (index, rep) => {\r\n\t\t\t\teditorInfo.ace_performSelectionChange(rep[0], rep[1], true);\r\n\t\t\t\teditorInfo.ace_setAttributeOnSelection(MARK_CLASS, false);\r\n\t\t\t});\r\n\r\n\t\t\t// make sure selected text is back to original value\r\n\t\t\teditorInfo.ace_performSelectionChange(originalSelStart, originalSelEnd, true);\r\n\t\t});\r\n\t};\r\n\r\n\t// we do nothing on callWithAce; actions will be handled on aceEditEvent\r\n\tvar doNothing = function () {};\r\n\r\n\tconst init = function (ace) {\r\n\t\treturn new preLinkMarker(ace);\r\n\t};\r\n\r\n\treturn {\r\n\t\tMARK_CLASS,\r\n\t\tinit\r\n\t}\r\n\r\n})();\r\n","const timeFormat = (() => {\r\n\r\n\tvar localizable = typeof html10n !== 'undefined';\r\n\r\n\tl10nKeys = {\r\n\t\t'seconds': 'ep_full_hyperlinks.time.seconds',\r\n\t\t'1 minute ago': 'ep_full_hyperlinks.time.one_minute',\r\n\t\t'minutes': 'ep_full_hyperlinks.time.minutes',\r\n\t\t'1 hour ago': 'ep_full_hyperlinks.time.one_hour',\r\n\t\t'hours': 'ep_full_hyperlinks.time.hours',\r\n\t\t'yesterday': 'ep_full_hyperlinks.time.one_day',\r\n\t\t'days': 'ep_full_hyperlinks.time.days',\r\n\t\t'last week': 'ep_full_hyperlinks.time.one_week',\r\n\t\t'weeks': 'ep_full_hyperlinks.time.weeks',\r\n\t\t'last month': 'ep_full_hyperlinks.time.one_month',\r\n\t\t'months': 'ep_full_hyperlinks.time.months',\r\n\t\t'last year': 'ep_full_hyperlinks.time.one_year',\r\n\t\t'years': 'ep_full_hyperlinks.time.years',\r\n\t\t'last century': 'ep_full_hyperlinks.time.one_century',\r\n\t\t'centuries': 'ep_full_hyperlinks.time.centuries',\r\n\t};\r\n\t\r\n\tvar time_formats = [\r\n\t\t[60, 'seconds', 1], // 60\r\n\t\t[120, '1 minute ago', '1 minute from now'], // 60*2\r\n\t\t[3600, 'minutes', 60], // 60*60, 60\r\n\t\t[7200, '1 hour ago', '1 hour from now'], // 60*60*2\r\n\t\t[86400, 'hours', 3600], // 60*60*24, 60*60\r\n\t\t[172800, 'yesterday', 'tomorrow'], // 60*60*24*2\r\n\t\t[604800, 'days', 86400], // 60*60*24*7, 60*60*24\r\n\t\t[1209600, 'last week', 'next week'], // 60*60*24*7*4*2\r\n\t\t[2419200, 'weeks', 604800], // 60*60*24*7*4, 60*60*24*7\r\n\t\t[4838400, 'last month', 'next month'], // 60*60*24*7*4*2\r\n\t\t[29030400, 'months', 2419200], // 60*60*24*7*4*12, 60*60*24*7*4\r\n\t\t[58060800, 'last year', 'next year'], // 60*60*24*7*4*12*2\r\n\t\t[2903040000, 'years', 29030400], // 60*60*24*7*4*12*100, 60*60*24*7*4*12\r\n\t\t[5806080000, 'last century', 'next century'], // 60*60*24*7*4*12*100*2\r\n\t\t[58060800000, 'centuries', 2903040000], // 60*60*24*7*4*12*100*20, 60*60*24*7*4*12*100\r\n\t];\r\n\t\r\n\tfunction prettyDate(time) {\r\n\t\t/*\r\n\t\tvar time = ('' + date_str).replace(/-/g,\"/\").replace(/[TZ]/g,\" \").replace(/^\\s\\s*/ /* rappel   , '').replace(/\\s\\s*$/, '');\r\n\t\tif(time.substr(time.length-4,1)==\".\") time =time.substr(0,time.length-4);\r\n\t\t*/\r\n\t\tlet seconds = (new Date() - new Date(time)) / 1000;\r\n\t\t// var seconds = new Date() - new Date(time) / 1000;\r\n\t\tlet token = 'ago';\r\n\t\tlet list_choice = 1;\r\n\t\tlet l10n_appendix = '.past';\r\n\t\r\n\t\tif (seconds < 0) {\r\n\t\t\tseconds = Math.abs(seconds);\r\n\t\t\ttoken = 'from now';\r\n\t\t\tl10n_appendix = '.future';\r\n\t\t\tlist_choice = 2;\r\n\t\t}\r\n\t\r\n\t\tlet i = 0; let\r\n\t\t\tformat;\r\n\t\twhile (format = time_formats[i++]) {\r\n\t\t\tif (seconds < format[0]) {\r\n\t\t\t\tconst count = Math.floor(seconds / format[2]);\r\n\t\t\t\tvar formatted_time;\r\n\t\t\t\tif (localizable) {\r\n\t\t\t\t\tconst key = l10nKeys[format[1]] + l10n_appendix;\r\n\t\t\t\t\tformatted_time = html10n.get(key, {count});\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// Wasn't able to localize properly the date, so use the default:\r\n\t\t\t\tif (formatted_time === undefined) {\r\n\t\t\t\t\tif (typeof format[2] === 'string') { formatted_time = format[list_choice]; } else { formatted_time = `${count} ${format[1]} ${token}`; }\r\n\t\t\t\t}\r\n\t\t\t\treturn formatted_time;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn time;\r\n\t}\r\n\t\r\n\treturn {prettyDate}\r\n})();\r\n","const shared = (() => {\r\n\r\n\tvar collectContentPre = (hook, context) => {\r\n\t\tconst link = /(?:^| )(lc-[A-Za-z0-9]*)/.exec(context.cls);\r\n\t\tconst fakeLink = /(?:^| )(fakelink-[A-Za-z0-9]*)/.exec(context.cls);\r\n\t\r\n\t\tif (link && link[1]) {\r\n\t\t\tcontext.cc.doAttrib(context.state, `link::${link[1]}`);\r\n\t\t}\r\n\t\r\n\t\t// a fake link is a link copied from this or another pad. To avoid conflicts\r\n\t\t// with existing links, a fake linkId is used, so then we generate a new one\r\n\t\t// when the link is saved\r\n\t\tif (fakeLink) {\r\n\t\t\tconst mapFakeLinks = pad.plugins.ep_full_hyperlinks.getMapfakeLinks();\r\n\t\t\tconst fakeLinkId = fakeLink[1];\r\n\t\t\tconst linkId = mapFakeLinks[fakeLinkId];\r\n\t\t\tcontext.cc.doAttrib(context.state, `link::${linkId}`);\r\n\t\t}\r\n\t\r\n\t\t// const tname = context.tname;\r\n\t\t// const state = context.state;\r\n\t\t// const lineAttributes = state.lineAttributes;\r\n\t\t// const tagIndex = tname;\r\n\t\t// const fonts = ['link'];\r\n\t\t// if (fonts.indexOf(tname) !== -1) {\r\n\t\t//   context.cc.doAttrib(state, tname);\r\n\t\t// }\r\n\t\r\n\t\treturn [];\r\n\t};\r\n\r\n\tconst generateLinkId = function () {\r\n\t\tconst linkId = `lc-${randomString(16)}`;\r\n\t\treturn linkId;\r\n\t};\r\n\r\n\treturn {\r\n\t\tcollectContentPre,\r\n\t\tgenerateLinkId,\r\n\t}\r\n\t\r\n})();\r\n"]}